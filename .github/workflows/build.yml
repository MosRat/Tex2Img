name: Build and Release

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release draft (true/false)'
        required: false
        default: 'false'

permissions:
  contents: write  # 允许创建 release 和上传资产

env:
  CARGO_TERM_COLOR: always
  # RUSTFLAGS: '-Ctarget-feature=+crt-static'  # Windows only, set globally and filtered by platform

jobs:
  build:
    strategy:
      matrix:
        platform:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            vcpkg_triplet: x64-linux-release
            pdfium_url: https://github.com/bblanchon/pdfium-binaries/releases/latest/download/pdfium-linux-x64.tgz
            pdfium_lib: lib/libpdfium.so
            artifact_name: tex2img-linux-x64
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   pdfium_url: https://github.com/bblanchon/pdfium-binaries/releases/latest/download/pdfium-mac-x64.tgz
          #   pdfium_lib: lib/libpdfium.dylib
          #   artifact_name: tex2img-macos-x64
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   pdfium_url: https://github.com/bblanchon/pdfium-binaries/releases/latest/download/pdfium-mac-arm64.tgz
          #   pdfium_lib: lib/libpdfium.dylib
          #   artifact_name: tex2img-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            vcpkg_triplet: x64-windows-static-release
            pdfium_url: https://github.com/bblanchon/pdfium-binaries/releases/latest/download/pdfium-win-x64.tgz
            pdfium_lib: bin/pdfium.dll
            artifact_name: tex2img-windows-x64
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            vcpkg_triplet: x64-linux-static
            pdfium_url: https://github.com/bblanchon/pdfium-binaries/releases/latest/download/pdfium-linux-musl-x64.tgz
            pdfium_lib: lib/libpdfium.so
            artifact_name: tex2img-linux-musl-x64

    runs-on: ${{ matrix.platform.os }}

    steps:
      # 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 安装 Rust
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Init Rust
        run: |
          rustup update
          rustup toolchain install stable
          rustup default stable

      # 缓存 Cargo 依赖
      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2.7.8

      # 安装 vcpkg 依赖（Linux）
      - name: Install vcpkg dependencies (Linux)
        if: matrix.platform.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update -qq && \
          sudo apt-get install -y --no-install-recommends \
            build-essential clang lld cmake curl pkg-config libssl-dev autoconf-archive autoconf automake && \


          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C linker=clang -C link-arg=-fuse-ld=lld" >> $GITHUB_ENV

          echo "CARGO_PROFILE_RELEASE_LTO=true" >> $GITHUB_ENV
          echo "CARGO_PROFILE_RELEASE_PANIC=abort" >> $GITHUB_ENV

          echo "CXXFLAGS=-fPIC" >> $GITHUB_ENV
          echo "CFLAGS=-fPIC" >> $GITHUB_ENV

      # 安装 vcpkg 依赖（musl）
      - name: Install musl dependencies
        if: matrix.platform.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update -qq && \
          sudo apt-get install -y --no-install-recommends musl-tools && \
          rustup target add x86_64-unknown-linux-musl
          echo "RUSTFLAGS=-C linker=musl-gcc -C target-feature=+crt-static" >> $GITHUB_ENV
          echo "CC=musl-gcc" >> $GITHUB_ENV
          echo "CXX=musl-g++" >> $GITHUB_ENV
          echo "CXXFLAGS=-static -fPIC" >> $GITHUB_ENV
          echo "CFLAGS=-static -fPIC" >> $GITHUB_ENV

      # 安装 vcpkg 依赖（macOS）
      - name: Install vcpkg dependencies (macOS)
        if: contains(matrix.platform.os, 'macos')
        run: |
          brew install pkg-config
          sudo xcode-select --install || true

      # 运行 cargo-vcpkg
      - name: Setup vcpkg
        uses: johnwason/vcpkg-action@v6
        id: vcpkg
        with:
          pkgs: fontconfig freetype "harfbuzz[graphite2]" icu
          triplet: ${{ matrix.platform.vcpkg_triplet }}
          cache-key: ${{ matrix.platform.os }}-${{ matrix.platform.target }}
          revision: "be1ae8e5c5bc79aac1b8f593f5554aee1cfde54f"
          token: ${{ github.token }}
          github-binarycache: true

      - name: Build cargo-vcpkg dependencies
        shell: bash
        run: |
          # 设置不同系统的路径和可执行文件
          if [ "$RUNNER_OS" = "Windows" ]; then
            VCPKG_ROOT='${{ github.workspace }}\vcpkg'
            VCPKG_EXE="vcpkg.exe"
          else
            VCPKG_ROOT='${{ github.workspace }}/vcpkg'
            VCPKG_EXE="vcpkg"
          fi
          
          export VCPKG_ROOT=$VCPKG_ROOT
          # 安装 cargo-vcpkg
          cargo install cargo-vcpkg
          
          # 构建依赖
          cargo vcpkg build

      # 设置环境变量
      - name: Set environment variables
        shell: bash
        run: |
          echo "TECTONIC_PKGCONFIG_FORCE_SEMI_STATIC=1" >> $GITHUB_ENV
          echo "CARGO_PROFILE_RELEASE_PANIC=abort" >> $GITHUB_ENV
          echo "TECTONIC_DEP_BACKEND=vcpkg" >> $GITHUB_ENV

          if ([ "${{ matrix.platform.os }}" == "windows-latest" ]); then
            echo "VCPKGRS_TRIPLET=x64-windows-static-release" >> $GITHUB_ENV
            echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV
          fi

          if ([ "${{ matrix.platform.os }}" == "ubuntu-20.04" ] && [ "${{ matrix.platform.target }}" != "x86_64-unknown-linux-musl" ]); then
            echo "RUSTFLAGS=-C linker=clang -C link-arg=-fuse-ld=lld" >> $GITHUB_ENV
          fi

          if ([ "${{ matrix.platform.target }}" == "x86_64-unknown-linux-musl" ]); then
            echo "VCPKGRS_TRIPLET=x64-linux-static-musl" >> $GITHUB_ENV
          fi

      # 编译项目
      - name: Build project
        run: |
          cargo build --release --target ${{ matrix.platform.target }}

      # 下载 pdfium
      - name: Download pdfium
        run: |
          curl -L -o pdfium.tgz "${{ matrix.platform.pdfium_url }}"
          mkdir -p pdfium
          tar -xzf pdfium.tgz -C pdfium

      # 准备产物
      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          # 复制可执行文件和库
          if [ "${{ matrix.platform.os }}" == "windows-latest" ]; then
            cp target/release/tex2img.exe artifacts/
            cp target/release/tex2img.dll artifacts/
          else
            file target/${{ matrix.platform.target }}/release/libtex2img.so
            file target/${{ matrix.platform.target }}/release/tex2img

            cp target/${{ matrix.platform.target }}/release/tex2img artifacts/
            cp target/${{ matrix.platform.target }}/release/libtex2img.so artifacts/libtex2img.so
          fi
          # 复制 pdfium 动态库
          cp pdfium/${{ matrix.platform.pdfium_lib }} artifacts/
          # 复制 test_lib.py
          cp test_lib.py artifacts/
          # 创建压缩包
          cd artifacts
          pwsh -Command "Compress-Archive -Path .\* -DestinationPath ..\${{ matrix.platform.artifact_name }}.zip -Force"

      # 上传产物
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact_name }}
          path: ${{ matrix.platform.artifact_name }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true'
    steps:
      # 检出代码以获取元数据
      - name: Checkout repository
        uses: actions/checkout@v4

      # 下载所有产物
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 创建 release draft
      - name: Create release draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME=$(date -u +%Y%m%d%H%M%S)
          gh release create "$TAG_NAME" \
            --draft \
            --title "Release $TAG_NAME" \
            --notes "Automated release for multi-platform build" \
            artifacts/*/*